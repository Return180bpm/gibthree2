{"version":3,"sources":["shapes.js","utils.js","generators.js","App.js","index.js"],"names":["Ground","size","rotation","color","args","Math","PI","Cylinder","pos","rTop","rBottom","h","rSegments","hSegments","isOpen","color1","position","Circle","r","segments","Ball","ws","hs","color2","CubeTextured","rotV","rotA","useState","active","setActive","colorMap1","useLoader","TextureLoader","colorMap2","onClick","Number","map","Cube","posXY","isBig","setIsBig","useSpring","spring","config","mass","tension","friction","precision","scale","to","ref","useRef","useFrame","clock","group","mesh","scale-x","rotation-y","meshStandardMaterial","roughness","attach","hex","d","toString","padStart","invlerp","x","y","a","min","max","clamp","range","x1","y1","x2","y2","lerp","CubeWall","colorMod","width","height","cubeArr","v","sizeOfCube","row","col","length","sin","currentColor","round","push","i","current","children","cube","z","material","g","Scene","DeviceOrientationControls","OrbitControls","target","Stars","radius","App","fallback","camera","fov","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7bcf96f8.chunk.js","sourcesContent":["import { useState, useRef } from \"react\";\nimport { TextureLoader } from \"three\";\nimport { useFrame, useLoader } from \"@react-three/fiber\";\nimport { Plane } from \"@react-three/drei\";\nimport { useSpring, animated as a } from \"@react-spring/three\";\n\nfunction Ground(size, rotation, color) {\n    return <Plane args={[20, 20]} rotation={[-Math.PI / 2, 0, 0]} />;\n}\n\nfunction Cylinder({\n    pos,\n    rTop,\n    rBottom,\n    h,\n    rSegments,\n    hSegments,\n    isOpen,\n    rotation,\n    color1,\n}) {\n    return (\n        <mesh position={pos} rotation={rotation}>\n            <cylinderBufferGeometry\n                args={[rTop, rBottom, h, rSegments, hSegments, isOpen]}\n            />\n            <meshStandardMaterial color={color1}></meshStandardMaterial>\n        </mesh>\n    );\n}\n\nfunction Circle({ pos, r, segments, rotation, color1 }) {\n    return (\n        <mesh position={pos} rotation={rotation}>\n            <circleBufferGeometry args={[r, segments]} />\n            <meshStandardMaterial color={color1}></meshStandardMaterial>\n        </mesh>\n    );\n}\n\nfunction Ball({ pos, r, ws, hs, color1, color2 }) {\n    return (\n        <mesh position={pos}>\n            <sphereBufferGeometry args={[r, ws, hs]} />\n            <meshStandardMaterial color={color1} />\n        </mesh>\n    );\n}\n\nfunction CubeTextured({\n    size = [1, 1, 1],\n    pos = [0, 2, 0],\n    color1 = \"white\",\n    color2 = \"aquamarine\",\n    rotV = 0.01,\n    rotA = 0.005,\n}) {\n    const [active, setActive] = useState(0);\n    const colorMap1 = useLoader(TextureLoader, \"assets/ex1.jpg\");\n    const colorMap2 = useLoader(TextureLoader, \"assets/ex2.jpg\");\n\n    return (\n        <mesh\n            position={pos}\n            onClick={() => {\n                setActive(Number(!active));\n            }}\n        >\n            {/* <boxBufferGeometry args={size} /> */}\n            <planeBufferGeometry args={[10, 10]} />\n            <meshStandardMaterial map={active ? colorMap1 : colorMap2} />\n        </mesh>\n    );\n}\nfunction Cube({\n    size = [1, 1, 1],\n    pos = [0, 0, 0],\n    posXY = { x: 1, y: 1 },\n    color1 = \"white\",\n    color2 = \"aquamarine\",\n    rotV = 0.01,\n    rotA = 0.005,\n}) {\n    const [isBig, setIsBig] = useState(false);\n    const [active, setActive] = useState(0);\n    const [isHovered, setIsHovered] = useState(false);\n\n    // following beb's video tutorial\n    // const { spring, scale } = useSpring({\n    //     spring: active,\n\n    //     scale: isBig ? 3 : 1,\n    //     config: config.wobbly,\n    // });\n    const { spring, position } = useSpring({\n        spring: active,\n        config: { mass: 3, tension: 600, friction: 50, precision: 0.0001 },\n        position: active ? [0, 0, 0] : pos,\n    });\n    const scale = spring.to([0, 1], [1, 5]);\n    // const position = spring.to([0, 1], [pos, [0, 0, 0]]);\n    const rotation = spring.to([0, 1], [0, Math.PI]);\n    // Can I have this and also change the color when I'm hovering?\n    const color = spring.to([0, 1], [color1, color2]);\n\n    const ref = useRef();\n\n    useFrame(({ clock }) => {\n        // changing color --- how???\n        // wobble + wave, to be used together. Works inside  CubeWall\n        // ref.current.rotation.x = Math.sin(ref.current.position.z);\n        // ref.current.position.z =\n        //     // Math.sin(ref.current.position.x) + clock.getElapsedTime() / 1000;\n        //     // Math.sin(posXY.y);\n        //     Math.sin(10 * posXY.x * posXY.y + clock.getElapsedTime() * 9) / 10;\n        // reversing rotation\n        // ref.current.rotation.y += rotV;\n        // rotV += rotA;\n        // if (rotV > 0.005) {\n        //     rotA = -rotA;\n        // }\n    });\n\n    return (\n        // Taken from https://gracious-keller-98ef35.netlify.app/docs/recipes/animating-with-react-spring/\n        <a.group position={position}>\n            <a.mesh\n                ref={ref}\n                scale-x={scale}\n                rotation-y={rotation}\n                onClick={() => {\n                    setIsBig(!isBig);\n                    setActive(Number(!active));\n                }}\n            >\n                <boxBufferGeometry args={size} />\n                <a.meshStandardMaterial\n                    roughness={0.5}\n                    attach=\"material\"\n                    color={color}\n                />\n            </a.mesh>\n        </a.group>\n    );\n}\n\n// Tried to make spring work with drei directly.\n// function CubeDrei({ size, pos, color }) {\n//     const [isBig, setIsBig] = useState(false);\n//     const { scale } = useSpring({\n//         scale: isBig ? 3 : 1,\n//         config: config.wobbly,\n//     });\n\n//     return (\n//         <Box\n//             args={size}\n//             position={pos}\n//             rotation={[Math.PI / 3, 0, 0]}\n//             scale={scale}\n//         >\n//             <a.meshPhongMaterial\n//                 onClick={() => setIsBig(!isBig)}\n//                 color={color}\n//             ></a.meshPhongMaterial>\n//         </Box>\n//     );\n// }\n\nexport { Ground, Cylinder, Circle, Ball, Cube, CubeTextured };\n","function getRandomInRange(min, max) {\n    return Math.random() * (max - min) + min;\n}\nconst hex = d => Number(d).toString(16).padStart(2, \"0\");\n// Interpolation functions from https://www.trysmudford.com/blog/linear-interpolation-functions/\nconst lerp = (x, y, a) => x * (1 - a) + y * a;\nconst clamp = (a, min = 0, max = 1) => Math.min(max, Math.max(min, a));\nconst invlerp = (x, y, a) => clamp((a - x) / (y - x));\nconst range = (x1, y1, x2, y2, a) => lerp(x2, y2, invlerp(x1, y1, a));\n\nexport { getRandomInRange, hex, lerp, clamp, invlerp, range };\n","import { useRef, useMemo } from \"react\";\nimport * as THREE from \"three\";\nimport { useFrame } from \"@react-three/fiber\";\nimport { Ground, Cylinder, Circle, Ball, Cube } from \"./shapes.js\";\nimport { getRandomInRange, hex, lerp, clamp, invlerp, range } from \"./utils.js\";\n\nfunction Columns({ amount }) {\n    const colArr = [];\n    for (let col = 0; col < amount; col++) {\n        // const element = amount[col];\n        const x = getRandomInRange(-100, 100);\n        const y = getRandomInRange(-200, -20);\n        const z = getRandomInRange(-100, 100);\n        const h = getRandomInRange(80, 300);\n        const colorInterpol = hex(Math.round(range(-200, -20, 0, 256, y)));\n        colArr.push(\n            <Cylinder\n                pos={[x, y, z]}\n                rTop={getRandomInRange(1, 20)}\n                rBottom={getRandomInRange(1, 20)}\n                h={h}\n                rSegments={getRandomInRange(3, 20)}\n                hSegments={7}\n                isOpen={false}\n                rotation={[0, 0, 0]}\n                color1={`#${colorInterpol}${colorInterpol}${colorInterpol}`}\n            />\n        );\n    }\n    return <>{colArr.map(col => col)}</>;\n}\n\nfunction OscillatingShape({ num = 10 }) {\n    const shapes = [];\n    let ref = useRef();\n    const sizeOfPoint = [1, 1, 1];\n    let yV = 0;\n    let blue = 0;\n\n    const vec = new THREE.Vector3();\n\n    useFrame(() => {\n        for (let i = 0; i < ref.current.children.length; i++) {\n            const shape = ref.current.children[i];\n\n            // WAVES\n            // simple sine wave\n            shape.position.lerp(\n                vec.set(shape.position.x, Math.sin(yV + i), shape.position.z),\n                1\n            );\n            // sine wave with a little wobble on the z-axis\n            // shape.position.lerp(\n            //     vec.set(\n            //         shape.position.x,\n            //         Math.sin(yV + i),\n            //         0.5 * Math.sin(yV + i)\n            //     ),\n            //     1\n            // );\n            // crazy irregular wavez in all idrections\n            // shape.position.lerp(\n            //     vec.set(\n            //         shape.position.x,\n            //         Math.sin(yV + i),\n            //         Math.sin(\n            //             yV **\n            //                 (i /\n            //                     range(\n            //                         -1,\n            //                         1,\n            //                         60,\n            //                         80,\n            //                         Math.sin(shape.position.y)\n            //                     ))\n            //         )\n            //     ),\n            //     1\n            // );\n\n            // CHANGE COLOR based on coordinates. different effects\n            blue = range(-1, 1, 0, 10, !vec.y || Math.sin(shape.position.y));\n            // blue = vec.y;\n            // SET the new color. 2 ways\n            // shape.material.color = new THREE.Color(0, 0, blue);\n            shape.material.color.b = blue;\n\n            //DEFORM\n            shape.scale.y = range(\n                -1,\n                1,\n                0.8,\n                1.2,\n                Math.sin(shape.position.y * 5)\n            );\n\n            // Y VELOCITY. how fast it's going\n            yV += 0.004;\n        }\n    });\n\n    useMemo(() => {\n        for (let i = 0; i < num; i++) {\n            shapes.push(\n                <mesh position={[i, 0, 0]} key={i}>\n                    <boxBufferGeometry args={sizeOfPoint} />\n                    <meshStandardMaterial\n                        roughness={0.5}\n                        attach=\"material\"\n                        color={\"black\"}\n                    />\n                </mesh>\n            );\n        }\n    }, [num, shapes]);\n\n    // return a group representing the whole oscillation. position it around 0 on the x-axis\n    return (\n        <group ref={ref} position={[(-sizeOfPoint[0] * num) / 2, 3, 0]}>\n            {shapes.length && shapes.map(shape => shape)}\n        </group>\n    );\n}\n\n// TODO\nfunction Planes({ amount }) {}\n\n// wall out of cubes\nfunction CubeWall({ width, height }) {\n    let cubeArr = [];\n    let colorMod;\n    let v = 0;\n    const sizeOfCube = [0.5, 0.5, 0.5];\n    // const separation = 1;\n    let group = useRef();\n\n    // CREATE initial wall\n    for (let row = 0; row < height; row++) {\n        for (let col = 0; col < width; col++) {\n            //only put in every other cube\n            if (\n                (row % 2 === 0 && col % 2 === 0) ||\n                (row % 2 === 1 && col % 2 === 1)\n            ) {\n                const interPolNum =\n                    (cubeArr.length * 256) / ((width / 2) * height);\n                const _colorMod = invlerp(0, width + height, row + col) * 256;\n                colorMod = range(-1, 1, 0, 256, Math.sin(col + row));\n                const currentColor = `#00${hex(Math.round(colorMod))}00`;\n                cubeArr.push(\n                    <Cube\n                        key={cubeArr.length}\n                        size={sizeOfCube}\n                        pos={[\n                            col * sizeOfCube[0],\n                            row * sizeOfCube[1] + sizeOfCube[1] * 0.5,\n                            0,\n                        ]}\n                        posXY={{ x: col, y: row }}\n                        color1={currentColor}\n                        color2=\"black\"\n                        rotV={(row + col) / 2000 + 0.001}\n                        rotA={(row + col) * 0.001}\n                    ></Cube>\n                );\n            }\n        }\n    }\n\n    // ANIMATE wall\n    useFrame(() => {\n        // could this be faster?\n        //  for (let row = 0; row < height; row++) {\n        // for (let col = 0; col < width; col++) {\n\n        // }}\n        for (let i = 0; i < group.current.children.length; i++) {\n            const cube = group.current.children[i];\n\n            cube.scale.z = range(-1, 1, 0.8, 2, Math.sin(i + v));\n            cube.children[0].material.color.g = range(\n                -1,\n                1,\n                0.2,\n                1,\n                Math.sin(i + v * 5)\n            );\n        }\n        v += 0.01;\n    });\n    return (\n        <group ref={group} position={[(-sizeOfCube[0] * width) / 2, 0, -10]}>\n            {cubeArr.length && cubeArr.map(cube => cube)}\n        </group>\n    );\n}\n\nexport { Columns, Planes, CubeWall, OscillatingShape };\n","import \"./App.css\";\nimport { Canvas, useThree } from \"@react-three/fiber\";\nimport {\n    Stars,\n    OrbitControls,\n    DeviceOrientationControls,\n} from \"@react-three/drei\";\nimport {\n    Ground,\n    Cylinder,\n    Circle,\n    Ball,\n    Cube,\n    CubeTextured,\n} from \"./shapes.js\";\nimport { Columns, Planes, CubeWall, OscillatingShape } from \"./generators.js\";\nimport { Suspense } from \"react/cjs/react.production.min\";\n\nfunction Scene() {\n    return (\n        <>\n            <DeviceOrientationControls />\n\n            <OrbitControls target={[5, 3, -10]} />\n            <ambientLight />\n            <pointLight position={[-1, 2, 4]} />\n            <Stars />\n            <Ground></Ground>\n            <Cube\n                size={[3, 6, 2]}\n                pos={[10, 3.1, 2]}\n                color1=\"lime\"\n                color2=\"black\"\n            />\n            <group position={[10, 0.1, 5]}>\n                <Ball\n                    radius={2}\n                    ws={10}\n                    hs={5}\n                    pos={[0, 11, 0]}\n                    color1=\"blueviolet\"\n                    color2=\"blanchedalmond\"\n                />\n                <Circle\n                    pos={[0, 0.1, 0]}\n                    r={5}\n                    segments={17}\n                    rotation={[-Math.PI / 2, 0, 0]}\n                    color1={\"hotpink\"}\n                />\n                <Cylinder\n                    pos={[0, 5, 0]}\n                    rTop={1}\n                    rBottom={0.5}\n                    h={10}\n                    rSegments={7}\n                    hSegments={7}\n                    isOpen={false}\n                    rotation={[0, 0, 0]}\n                    color1={\"crimson\"}\n                />\n            </group>\n            <CubeTextured />\n            {/* <Columns amount={20} /> */}\n            <CubeWall width={20} height={20} />\n            {/* <OscillatingShape num={30} /> */}\n        </>\n    );\n}\n\nfunction App() {\n    return (\n        <Suspense fallback={null}>\n            <Canvas camera={{ fov: 75, position: [-10, 5, -5] }}>\n                <Scene />\n            </Canvas>\n        </Suspense>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}